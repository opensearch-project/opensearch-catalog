{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"OpenSearch Foundational - Cognito Stack.  **Attention** This template creates AWS resources that will incur charges on your account.",
    "Parameters":{
        "NetworkStackName": {
            "Description": "Name of an active CloudFormation stack that contains the networking resources.",
            "Type": "String"
        }
    },
    "Resources":{
        "CognitoPassword": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
              "Description": "Password for OpenSearch Cognito Proxy",
              "GenerateSecretString": {
                "SecretStringTemplate": "{\"username\": \"administrator\"}",
                "GenerateStringKey": "password",
                "PasswordLength": 16,
                "ExcludeCharacters": "\"@/\\"
              }
            }
          },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "_lambda_role"]]},
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
			"Effect": "Allow",
			"Principal": { "Service": "lambda.amazonaws.com"},
			"Action": "sts:AssumeRole"
                    }] 
                },
                "Policies": [{
                    "PolicyName": { "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "_lambda_policy"]]},
                    "PolicyDocument": {
                        "Version":"2012-10-17",
                        "Statement":[
                        {
			    "Effect": "Allow",
			    "Action": "lambda:InvokeFunction",
			    "Resource": "arn:aws:lambda:*:*:function:*"
			},
			{
			    "Effect":"Allow",
			    "Action":[
			        "logs:CreateLogGroup",
			        "logs:CreateLogStream",
			        "logs:PutLogEvents"
			    ],
			    "Resource":"arn:aws:logs:*:*:*:*"
			},
			{
			    "Effect": "Allow",
			    "Action": [ "cognito-idp:*" ],
			    "Resource": "arn:aws:cognito-idp:*:*:userpool/*"
			}, 
            {
			    "Effect": "Allow",
			    "Action": [ "es:*" ],
			    "Resource": [ "*" ]
			},
            {
                "Effect": "Allow",
                "Action": [
                    "secretsmanager:GetSecretValue"
                ],
                "Resource": { "Ref": "CognitoPassword" }
            }]
                    }
                } 
                ]
            }
        },
        
        "AuthUserRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": [ "", [ "cog_auth_role_", {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}]]},
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Federated": "cognito-identity.amazonaws.com"},
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                            "StringEquals": {
                                "cognito-identity.amazonaws.com:aud": { "Ref" : "CognitoIdentityPool"}
                            },
                            "ForAnyValue:StringLike": {
                                "cognito-identity.amazonaws.com:amr": "authenticated"
                            }
                        }
                    }] 
                },
                "Policies": [{
                    "PolicyName": { "Fn::Join": [ "", [ "cog_auth_policy_", {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}]]},
                    "PolicyDocument": {
                        "Version":"2012-10-17",
                        "Statement":[{
                            "Effect": "Allow",
                            "Action": [
                                 "mobileanalytics:PutEvents",
                                 "cognito-sync:*",
                                 "cognito-identity:*"
                            ],
                            "Resource": [ "*" ]
                        }]
                    }
                }]
            }
        },
        "CognitoUserPool": {
            "Type" : "AWS::Cognito::UserPool",
            "Properties" : {
                "UserPoolName" : {"Fn::Join":["", [ "user_pool_",{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}]]}
            }
        },
        "CognitoIdentityPool": {
            "Type" : "AWS::Cognito::IdentityPool",
            "Properties" : {
                "IdentityPoolName" : {"Fn::Join":["", [ "identity_pool_",{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}]]},
                "AllowUnauthenticatedIdentities" : "true"
            }
        },
        "IdentityPoolRoleAttachment": {
            "DependsOn": "AuthUserRole",
            "Type" : "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties" : {
                "IdentityPoolId": { "Ref": "CognitoIdentityPool"},
                "Roles": {
                    "authenticated": { "Fn::GetAtt": ["AuthUserRole", "Arn"]}
                }
            }
        },
        "CognitoDomain":{
	    "DependsOn": "CognitoUserPool",	
            "Type" : "AWS::Cognito::UserPoolDomain",
            "Properties" : {
                "Domain" : {"Fn::Join":["",[{"Fn::Select":["0",{"Fn::Split":["-",{"Fn::Select":["2",{"Fn::Split":["/",{"Ref":"AWS::StackId"}]}]}]}]},"-",{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}]]},
                "UserPoolId" : {"Ref":"CognitoUserPool"}
            }
        },
	"WiringFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": ["LambdaExecutionRole","CognitoUserPool","CognitoIdentityPool"],
            "Properties" : {
                "Handler": "index.handler",
                "Role": { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ]},
                "Runtime": "python3.9",
                "Timeout": 300,
                "Environment": {
                    "Variables" : { 
                        "SECRET_NAME": { "Ref": "CognitoPassword" },
                        "REGION": { "Ref" : "AWS::Region"},
                        "STACK_PREFIX": {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}},
                        "USER_POOL_ID": { "Ref": "CognitoUserPool"}
                    }
                },
                "Code": {
                    "ZipFile": {"Fn::Join": ["",[
                        "from __future__ import print_function\n",
			"\n",
            "import boto3\n",
            "import json\n",
            "import os\n",
            "import cfnresponse\n",
            "",
            "def get_secret():\n",
            "    region_name = os.environ['AWS_REGION']\n",
            "    secret_name = os.environ['SECRET_NAME']\n",
            "",
            "    session = boto3.session.Session()\n",
            "    client = session.client(\n",
            "        service_name='secretsmanager',\n",
            "        region_name=region_name\n",
            "    )\n",
            "",
            "    try:\n",
            "        get_secret_value_response = client.get_secret_value(SecretId=secret_name)\n",
            "    except Exception as e:\n",
            "        raise e\n",
            "    else:\n",
            "        if 'SecretString' in get_secret_value_response:\n",
            "            secret = get_secret_value_response['SecretString']\n",
            "            return json.loads(secret)\n",
            "        else:\n",
            "            raise ValueError(\"Secret not found in SecretString\")\n",
			"\n",
			"def create_cognito_user():\n",
			"    cognito_idp = boto3.client('cognito-idp')\n",
            "    secret = get_secret()\n",
			"    try:\n",
			"        response = cognito_idp.admin_create_user(\n",
			"            UserPoolId=os.environ['USER_POOL_ID'],\n",
			"            Username='administrator',\n",
			"            TemporaryPassword=secret['password']\n",
			"        )\n",
			"    except Exception as e:\n",
		        "        print('Exception creating Cognito user: {0}'.format(e))\n",
			"\n",
            "",
            "def handler(event, context):\n",
			"    if event['RequestType'] == 'Create':\n",
			"        try:\n",
			"            create_cognito_user()\n",
			"        except Exception as e:\n",
		        "            send_response(event, context, cfnresponse.FAILED)\n",
		        "    send_response(event, context, cfnresponse.SUCCESS)\n",
			"\n",
			"\n",
		        "def send_response(event, context, status_code):\n",
		        "    response_data = {}\n",
		        "    response_data['Data'] = 'done'\n",
		        "    cfnresponse.send(event, context, status_code, response_data, \"CustomResourcePhysicalID\")\n",
		        "\n"
			]]
		    }
                }
            }
        },
    "WiringFunctionInvocation": {
            "Type": "Custom::WiringFunctionInvocation",
            "DependsOn": "WiringFunction",
            "Properties": {
                "ServiceToken": { "Fn::GetAtt": [ "WiringFunction", "Arn" ]},
                "Region": { "Ref": "AWS::Region"}
            }
        }
    },                                                                                              
    "Outputs":{
        "StackName":{
            "Description":"This is the stack name.",
            "Value": {"Ref":"AWS::StackName"},
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-StackName" }}
	},
        "CognitoUser":{
                "Description":"This is the cognito user.",
                "Value": "administrator",
                "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-CognitoUser" }}
        },	
        "CognitoUserPoolEndpoint":{
                "Description":"The endpoint of the Cognito User Pool",
                "Value":{"Fn::Join":["",[{"Ref":"CognitoDomain"},".auth.",{"Ref":"AWS::Region"},".amazoncognito.com"]]},
            "Export" : {"Name" : {"Fn::Sub": "${AWS::StackName}-CognitoUserPoolEndpoint" }}
        },
        "CognitoUserPool":{
                "Description":"The user pool name.",
                "Value": {"Ref":"CognitoUserPool"},
                "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-CognitoUserPool" }}
        },
        "CognitoIdentityPool":{
                "Description":"The identity pool name.",
                "Value": {"Ref":"CognitoIdentityPool"},
                "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-CognitoIdentityPool" }}
        },
        "AuthRoleARN":{
            "Description":"ARN of the Authentication Role for Cognito Users",
                "Value": { "Fn::GetAtt": [ "AuthUserRole", "Arn" ]},
                "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-AuthRoleARN" }}

        }        
    }  
}
