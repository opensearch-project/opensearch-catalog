{
    "AWSTemplateFormatVersion":"2010-09-09", 
    "Description":"OpenSearch Foundational - Dashboards Proxy Stack.  **Attention** This template creates AWS resources that will incur charges on your account.",
    "Parameters":{
        "IPAddressRange": {
            "Type": "String",
            "Description": "Enter the IP address range to allow access to the security group (e.g. 10.0.0.0/24)",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\/([1-2]?[0-9]|3[0-2])$",
            "ConstraintDescription": "The IP address range must be in the format x.x.x.x/x (e.g. 10.0.0.0/24)"
          },
        "NetworkStackName": {
            "Description": "Name of an active CloudFormation stack that contains the networking resources.",
            "Type": "String"
        },
        "SearchStackName": {
            "Description": "Name of an active CloudFormation stack that contains the search resources.",
            "Type": "String"
        },
        "CognitoStackName": {
            "Description": "Name of an active CloudFormation stack that contains the cognito resources.",
            "Type": "String"
        }
    },
    "Mappings":{
        "AWSEC2AMILinux":{
            "us-east-1":{"AmiId":"ami-0ebfd941bbafe70c6"},
            "us-east-2":{"AmiId":"ami-037774efca2da0726"},
            "us-west-1":{"AmiId":"ami-047d7c33f6e7b4bc4"},
            "us-west-2":{"AmiId":"ami-08d8ac128e0a1b91c"},
            "ap-south-1":{"AmiId":"ami-08718895af4dfa033"},
            "ap-southeast-1":{"AmiId":"ami-0aa097a5c0d31430a"},
            "ap-southeast-2":{"AmiId":"ami-0e8fd5cc56e4d158c"},
            "ap-northeast-1":{"AmiId":"ami-0f75d1a8c9141bd00"},
            "ap-northeast-2":{"AmiId":"ami-06f73fc34ddfd65c2"},
            "ap-northeast-3":{"AmiId":"ami-0694f331bbf33fefa"},
            "ca-central-1":{"AmiId":"ami-0208b77a23d891325"},
            "eu-central-1":{"AmiId":"ami-00f07845aed8c0ee7"},
            "eu-west-1":{"AmiId":"ami-0fed63ea358539e44"},
            "eu-west-2":{"AmiId":"ami-0b45ae66668865cd6"},
            "eu-west-3":{"AmiId":"ami-0cb0b94275d5b4aec"},
            "eu-north-1":{"AmiId":"ami-0129bfde49ddb0ed6"},
            "sa-east-1":{"AmiId":"ami-0cd690123f92f5079"}
        },
        "LambdaFunctionMappings": {
              "us-east-1": {
                "BucketName": "ws-assets-prod-iad-r-iad-ed304a55c2ca1aee",
                "ObjectKey": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/os_init_function.py.zip",
                "Layer": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/Klayers-p312-opensearch-py-94f72145-b3aa-4698-b962-5ca70864c436.zip"
              },
              "us-west-2": {
                "BucketName": "ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0",
                "ObjectKey": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/os_init_function.py.zip",
                "Layer": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/Klayers-p312-opensearch-py-94f72145-b3aa-4698-b962-5ca70864c436.zip"
              },
              "ap-southeast-1": {
                "BucketName": "ws-assets-prod-iad-r-sin-694a125e41645312",
                "ObjectKey": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/os_init_function.py.zip",
                "Layer": "4192e8ce-704a-4400-8d18-81cac3e20e09/assets/Klayers-p312-opensearch-py-94f72145-b3aa-4698-b962-5ca70864c436.zip"
              }
          }
    },
    "Resources":{
        "ProxySecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Rules for allowing access to the proxy",
                "VpcId" : {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-VPCID"}},               
                "SecurityGroupIngress":
                [
                    {
                        "Description": "Allow HTTPS access over the internet",
                        "IpProtocol":"tcp",
                        "FromPort":"443",
                        "ToPort":"443",
                        "CidrIp":{
                            "Ref": "IPAddressRange"
                        }
                    }
                ],
                "SecurityGroupEgress":
                [
                    {
                        "Description": "Allow proxy to download resources from the internet",
                        "IpProtocol":"-1",
                        "FromPort":"0",
                        "ToPort":"65535",
                        "CidrIp":"0.0.0.0\/0"
                    }
                ],
                "Tags":[
                    {"Key": "Name","Value": {"Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}},"-dashboards-proxy-sg"]]}}
                ]
            }
        },
        "ProxyIPAddress":{
            "Type":"AWS::EC2::EIP",
            "Properties":{
                "Domain":"vpc"
            }
        },
        "ProxyNetworkInterface":{
            "Type":"AWS::EC2::NetworkInterface",
            "Properties":{
                "Description":"Dashboards Proxy ENI",
                "PrivateIpAddress": {"Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-VPCCIDRPrefix"}},".0.150"]]},
                "GroupSet":[{"Ref":"ProxySecurityGroup"}],
                "SubnetId": {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-PublicSubnet0"}},
                "Tags":[
                    {"Key": "Name","Value": {"Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}},"-dashboards-proxy-if"]]}}
                ]
            }
        },
        "AssociateEIPProxy" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : [ "ProxyIPAddress", "AllocationId" ]},
                "NetworkInterfaceId" : { "Ref" : "ProxyNetworkInterface" }
            }
        },
        "ProxyRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "RoleName": { "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "-dashboards-proxy-role"]]},
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[{
                       "Effect":"Allow",
                       "Principal":{"Service":["ec2.amazonaws.com"]},
                       "Action":["sts:AssumeRole"]
                    }]
                },
                "Path":"/",
                "ManagedPolicyArns":["arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"],
                "Policies": [{
                    "PolicyName": { "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "-dashboards-proxy-policy"]]},
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect":"Allow",
                                "Action":"ec2:Describe*",
                                "Resource":"*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": ["es:ESHttp*"],
                                "Resource": {"Fn::Join":["",["arn:aws:es:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":domain/",{"Fn::ImportValue" : {"Fn::Sub": "${SearchStackName}-SearchDomainName"}},"/*"]]}
                            }
                        ]
                    }
                }]
            }
        },  
        "ProxyInstanceProfile":{
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{"Ref": "ProxyRole"}]
            }   
        },      
        "DashboardsProxy":{
            "Type":"AWS::EC2::Instance",
            "Metadata":{
                "Comment":"Install a simple application",
                "AWS::CloudFormation::Init":{
                    "configSets":{
                        "default":["step1"]
                    },   
                    "step1":{
                        "packages":{
                            "yum":{
                                "nginx":[]
                            }
                        },
                        "files":{
                            "/etc/nginx/conf.d/default.conf":{

                                "content":{
                                    "Fn::Join":[
                                        "",
                                        [
                                            "server {\n",
                                            "    listen 443;\n",
                                            "    server_name $host;\n",
                                            "    rewrite ^/$ https://$host/_dashboards redirect;\n",
                                            "\n", 
                                            "    ssl_certificate           /etc/nginx/cert.crt;\n",
                                            "    ssl_certificate_key       /etc/nginx/cert.key;\n",
                                            "\n", 
                                            "    client_max_body_size 100M;\n",
                                            "\n", 
                                            "    ssl on;\n",
                                            "    ssl_session_cache  builtin:1000  shared:SSL:10m;\n",
                                            "    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;\n",
                                            "    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;\n",
                                            "    ssl_prefer_server_ciphers on;\n",
                                            "\n", 
                                            "    # local variables for host resolution for the DNS timeouts.  Use variable to resolve intead of URI which grabs once\n",
                                            "    # ...it will uses DNS resolver in case cached entry for the IP has expired\n",
                                            "    set $es_endpoint ",                                                             
                                            {"Fn::ImportValue" : {"Fn::Sub": "${SearchStackName}-SearchEndpoint"}},
                                            ";\n",
                                            "    set $cognito_endpoint ",                                                             
                                            {"Fn::ImportValue" : {"Fn::Sub": "${CognitoStackName}-CognitoUserPoolEndpoint"}},
                                            ";\n", 
                                            "\n", 
                                            "    # resolver settings to avoid cache issues with DNS resolution and Amazon ES\n",
                                            "    resolver ",
                                            {"Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-VPCCIDRPrefix"}},".0.2"]]},
                                            " 169.254.169.253 ipv6=off valid=30s;",
                                            "\n", 
                                            "    location ^~ /_dashboards {\n",
                                            "        # Forward requests to Dashboards\n",
                                            "        proxy_pass https://$es_endpoint;\n",
                                            "\n", 
                                            "        # Handle redirects to Amazon Cognito\n",
                                            "        proxy_redirect https://$cognito_endpoint https://$host;\n",
                                            "\n", 
                                            "        # Update cookie domain and path\n",
                                            "        proxy_cookie_domain $es_endpoint $host;\n",
                                            "\n", 
                                            "        proxy_set_header Accept-Encoding \"\";\n",
                                            "        sub_filter_types *;\n",
                                            "        sub_filter $es_endpoint $host;\n",
                                            "        sub_filter_once off;\n",
                                            "\n", 
                                            "        # Response buffer settings\n",
                                            "        proxy_buffer_size 128k;\n",
                                            "        proxy_buffers 4 256k;\n",
                                            "        proxy_busy_buffers_size 256k;\n",
                                            "    }\n",
                                            "\n",               
                                            "    location ~ \\/(log|sign|error|fav|forgot|change|oauth2|saml) {\n",
                                            "        # Forward requests to Cognito\n",
                                            "        proxy_pass https://$cognito_endpoint;\n",
                                            "\n", 
                                            "        # Handle redirects to Dashboards\n",
                                            "        proxy_redirect https://$es_endpoint https://$host;\n",
                                            "\n", 
                                            "        # Handle redirects to Amazon Cognito\n",
                                            "        proxy_redirect https://$cognito_endpoint https://$host;\n",
                                            "\n", 
                                            "        # Update cookie domain\n",
                                            "        proxy_cookie_domain $cognito_endpoint $host;\n",
                                            "    }\n",
                                            "}\n"
                                        ]
                                    ]         
                                },
                                "mode":"000644",
                                "owner":"root",
                                "group":"root"
                            }
                        },
                        "services":{
                            "sysvinit":{
                                "amazon-ssm-agent":{
                                    "enabled":"true",
                                    "ensureRunning":"true"
                                },
                                "nginx":{
                                    "enabled":"true",
                                    "ensureRunning":"true"
                                }                              
                            }
                        }
                    }
                }
            },
            "Properties":{
                "Tags":[
                    {"Key": "Name","Value": {"Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}},"-dashboards-proxy"]]}}
                ],                            
                "ImageId":{
                    "Fn::FindInMap":[
                        "AWSEC2AMILinux",
                        {"Ref":"AWS::Region"},
                        "AmiId"
                    ]
                },
                "InstanceType":"m6i.large",
                "IamInstanceProfile":{ "Ref":"ProxyInstanceProfile"},
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":[
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "dnf update -y aws-cfn-bootstrap\n",
                                "dnf update -y aws-cli\n",
                                "dnf update -y amazon-ssm-agent\n",
                                "mkdir /usr/share/es-scripts\n",
                                "sleep 5\n",
                                "dnf install nginx -y\n",
                                "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt -subj /C=US/ST=./L=./O=./CN=.\n",
                                "/opt/aws/bin/cfn-init -c default -v ",
                                "         --stack ",
                                {
                                    "Ref":"AWS::StackName"
                                },
                                "         --resource DashboardsProxy ",
                                "         --region ",
                                {
                                    "Ref":"AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                },    
                "NetworkInterfaces":[
                    {
                        "DeviceIndex":"0",
                        "NetworkInterfaceId":{"Ref":"ProxyNetworkInterface"}
                    }
                ]
            }
        },
        "OSInitLambdaRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
         "RoleName": { 
             "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "-OS_INIT-role"]]
         },
         "AssumeRolePolicyDocument": {
             "Version": "2012-10-17",
             "Statement": [
             {
                 "Effect": "Allow",
                 "Principal": {
                 "Service": "lambda.amazonaws.com"
                 },
                 "Action": "sts:AssumeRole"
             }
             ]
         },
         "ManagedPolicyArns": [
             "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
             "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
         ],
         "Policies": [
             {
             "PolicyName": { "Fn::Join": [ "", [ {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}}, "-dashboards-proxy-policy"]]},
             "PolicyDocument": {
                 "Version": "2012-10-17",
                 "Statement": [
                     {
                         "Effect":"Allow",
                         "Action":"ec2:Describe*",
                         "Resource":"*"
                     },
                     {
                         "Effect": "Allow",
                         "Action": ["es:ESHttp*"],
                         "Resource": {"Fn::Join":["",["arn:aws:es:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":domain/",{"Fn::ImportValue" : {"Fn::Sub": "${SearchStackName}-SearchDomainName"}},"/*"]]}
                     }
                 ]
             }
         }
     ]
     }
         },     
         "OpenSearchpyLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
            "CompatibleRuntimes": [
               "python3.12"
            ],
            "Content": {
                "S3Bucket": {
                    "Fn::FindInMap": [
                        "LambdaFunctionMappings",
                        {
                        "Ref": "AWS::Region"
                        },
                        "BucketName"
                    ]
                    },
                "S3Key": {
                    "Fn::FindInMap": [
                        "LambdaFunctionMappings",
                        {
                        "Ref": "AWS::Region"
                        },
                        "Layer"
                    ]
                }
            },
            "LayerName": "Klayers-p312-opensearch-py"
            }
         },
         "OSInitLambdaFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
             "FunctionName": {
                 "Fn::Join": ["",[{"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-EnvTag"}},"-OS_INIT"]]
             },
             "Role": {
                "Fn::GetAtt": [
                  "OSInitLambdaRole",
                  "Arn"]
            },
             "Handler": "os_init_function.lambda_handler",
             "Runtime": "python3.12",
             "Code": {
                "S3Bucket": {
                    "Fn::FindInMap": [
                        "LambdaFunctionMappings",
                        {
                        "Ref": "AWS::Region"
                        },
                        "BucketName"
                    ]
                    },
                    "S3Key": {
                    "Fn::FindInMap": [
                        "LambdaFunctionMappings",
                        {
                        "Ref": "AWS::Region"
                        },
                        "ObjectKey"
                    ]
                }
            },
             "VpcConfig": {
                 "SecurityGroupIds": [
                     {
                       "Ref": "ProxySecurityGroup"
                     }
                 ],
             "SubnetIds": {
                 "Fn::Split": [
                 ",",
                 {
                     "Fn::Join": [
                     ",",
                     [
                         {
                         "Fn::ImportValue": {
                             "Fn::Sub": "${NetworkStackName}-PrivateSubnetApp0"
                         }
                         },
                         {
                         "Fn::ImportValue": {
                             "Fn::Sub": "${NetworkStackName}-PrivateSubnetApp1"
                         }
                         }
                     ]
                     ]
                 }
                 ]
             }
         },
         "MemorySize": 256,
         "Timeout": 180,
         "Layers": [
            {
              "Ref": "OpenSearchpyLayer"
            }],
         "Environment": {
             "Variables": {
             "ES_ENDPOINT": {
                 "Fn::Join": [
                     "",
                     [
                     "https://",
                     {
                         "Fn::ImportValue": {
                         "Fn::Sub": "${SearchStackName}-SearchEndpoint"}
                     }
                 ]
             ]
             }
             }
         }
     }
}
    },
    "Outputs":{
        "DashboardsProxyRoleArn":{
            "Description":"Dashboards proxy role ARN for FGAC role mapping.",
            "Value": {"Fn::GetAtt" : ["ProxyRole", "Arn"] },
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-DashboardsProxyRoleArn" }}
        },  
        "DashboardsProxyURL":{
            "Description":"Dashboards Proxy Public IP address.",
            "Value": {"Fn::Join":["",["https://",{"Ref":"ProxyIPAddress"},"/_dashboards"]]},       
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-DashboardsProxyURL" }}
        },
        "OpenSearchInitRoleARN":{
            "Description":"ARN for the Lambda intitialisation function.",
            "Value": {
                "Fn::GetAtt": [
                  "OSInitLambdaRole",
                  "Arn"
                ]},       
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-OSInitRoleARN"
                }
            }
        }
    }
}    

